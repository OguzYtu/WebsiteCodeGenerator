[comment encoding = UTF-8 /]	
[module authentication('http://cs.manchester.ac.uk/mdsd/WebApplicationFramework', 'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping')]

[import org::eclipse::acceleo::module::website::generator::requests::extensions/]
[import org::eclipse::acceleo::module::website::generator::common::controllerclasses/]
[import org::eclipse::acceleo::module::website::generator::common::autogeneratedpages/]


[template public generateLogin(model : WafModel, page : Page)]

[file ('src/automated/website/security/SecurityConfiguration'.concat(model.javaExtension()), false, 'UTF-8')]
package automated.website.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import automated.website.dao.*;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
	
	@Autowired
	@Qualifier("userDetailsService")
	UserAuthDao userDetailsService;

	@Autowired
	public void configureGlobalSecurity(AuthenticationManagerBuilder auth)
			throws Exception {
		auth.userDetailsService(userDetailsService);
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		String firstrootpage = "";
		String homepage = "";
	[for (p : Page | model.pages)]
	[if (p.name.toLowerCase().replaceAll(' ', '').contains('homepage'))]
		homepage = "[p.generatePageURL('').trim()/]";
	[elseif (p.parentPage.oclIsUndefined())]
		if (homepage.equals("") && firstrootpage.equals("")) {
			firstrootpage = "[p.generatePageURL('').trim()/]";
		}
	[/if]
	[/for]
		if (homepage.equals("")) {
			homepage = firstrootpage;
		}
        http.authorizeRequests()
		[for (unit : ContentUnit | model.pages.units)]
		[if (unit.requiresRole <> '')]
		.antMatchers("/", "/*[unit.displayedOn.oclAsType(Page).generatePageURL('').trim()/]*/**").access("hasRole('ROLE_[unit.requiresRole.toUpperCase()/]')")
		[/if]
		[/for]
		[for (unit : ContentUnit | model.pages.units)]
		[unit.assignRoleForActions().trim()/]
		[/for]
        .antMatchers("/", "/home").permitAll()
        .antMatchers("/admin/**").permitAll()
        .and().formLogin().loginPage("/login")
        .defaultSuccessUrl("/"+homepage).usernameParameter("username").passwordParameter("password")
        .and().exceptionHandling().accessDeniedPage("/errorPage");
        http.csrf().disable();
	}
}
[/file]

[file ('src/automated/website/dao/UserAuthDao'.concat(model.javaExtension()), false, 'UTF-8')]
package automated.website.dao;

import java.util.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import automated.website.service.*;

@Service("userDetailsService")
public class UserAuthDao implements UserDetailsService {

	protected final Log logger = LogFactory.getLog(getClass());
	
	@Override
	public UserDetails loadUserByUsername(String username)
			throws UsernameNotFoundException {
		
		logger.info("loadUserByUsername username="+username);
		
		[model.authentication.user.name/]ServiceImpl userServiceImpl = new [model.authentication.user.name/]ServiceImpl();

		String password = null;
		
		[if (model.authentication.oclAsType(LocalAuthenticationSystem).authenticationKey.toString() = 'Username')]
		password = userServiceImpl.getPassword(username);
		[else]
		if (userServiceImpl.getUserWithEmail(username) != null) {
			password = userServiceImpl.getUserWithEmail(username).getPassword();
			username = userServiceImpl.getUserWithEmail(username).getUsername();
		}	
		[/if]
		
		if(password == null){
			throw new UsernameNotFoundException(username + " not found");
		}
		
		String role = userServiceImpl.getRole(username); 
		
		Set<GrantedAuthority> auths = new HashSet<GrantedAuthority>();
		//Considering there are only 2 roles for now (user and admin) 
		if(role.equalsIgnoreCase("admin")) {
			auths.add(new SimpleGrantedAuthority("ROLE_" + role.toUpperCase()));
		}
		auths.add(new SimpleGrantedAuthority("ROLE_USER"));
		
		List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>(auths);
		
		return new User(username, password, 
				true, true, true, true, authorities);
	
	}

}
[/file]

[file ('src/automated/website/controller/LoginController'.concat(model.javaExtension()), false, 'UTF-8')]
package automated.website.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import automated.website.model.*;
import automated.website.service.*;

@Controller
public class LoginController {

@RequestMapping(value = "/access-denied", method = RequestMethod.GET)
	public String accessDeniedPage(ModelMap model) {
		//This return page does not matter, it will redirect to the log-in page
		return "login";
	}
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String loginPageGet() {
		return "login";
	}
	
	@RequestMapping(value = "/loginProcess", method = RequestMethod.POST)
	public ModelAndView login() {
		//This return page does not matter, it will redirect to the log-in page
	    ModelAndView mav = new ModelAndView("login");
	    return mav;
	}
	
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String newLogoutPage(HttpServletRequest request,
			HttpServletResponse response) {
		Authentication auth = SecurityContextHolder.getContext()
				.getAuthentication();
		if (auth != null) {
			new SecurityContextLogoutHandler().logout(request, response, auth);
		}
		//This return page does not matter, it will redirect to the log-in page
		return "login";
	}

}
[/file]

[comment calling this method to generate the beginning of the log-in page/]

[page.generateBeginningOfPages(model, 'login')/]

[file ('WebContent/WEB-INF/jsp/login'.concat(model.jspExtension()), true, 'UTF-8')]
<div class="authenticationcard">

<form class="m-t" role="form" th:action="@{/loginProcess}" method="POST" autocomplete="off">

	<table class="striped"  align="center">
    <tr>
		[if (model.authentication.oclAsType(LocalAuthenticationSystem).authenticationKey.toString() = 'Username')]
    	  <td class="lefttd"><h5>Username:</h5> </td>
		  <td class="righttd"><input type="text" class="form-control" id="username" name="username" placeholder="Username" required="" /> </td>
		[else]
    	  <td class="lefttd"><h5>Email:</h5> </td>
		  <td class="righttd"><input type="text" class="form-control" id="username" name="username" placeholder="Email" required="" /> </td>		
		[/if]
    </tr>
    <tr>
        <td class="lefttd"><h5>Password:</h5></td>
        <td class="righttd"> <input type="password" class="form-control" id="password" name="password" placeholder="Password" required="" /> </td>
    </tr>
    <tr>
		<td class="lefttd"></td>
    	<td class="righttd" align="left"> <button type="submit" class="btn btn-primary block full-width m-b grey darken-2 buttonsize">[page.units->at(1).oclAsType(LoginUnit).submitLabel/]
    		<i class="material-icons right">send</i>
    	</button> </td>
    </tr>
	<tr>
		<td class="lefttd"><a  class="btn btn-primary block full-width m-b grey darken-2" href="/[model.siteName.replaceAll(' ', '')/]/requestResetPassword">I forgot my password</a></td>
		<td class="righttd"><a  class="btn btn-primary block full-width m-b grey darken-2 buttonsize" href="/[model.siteName.replaceAll(' ', '')/]/[page.units->at(1).oclAsType(LoginUnit).cancelDestination.generatePageURL('').trim()/]">[page.units->at(1).oclAsType(LoginUnit).cancelLabel/]
			<i class="material-icons right">cancel</i>
		</a></td>
	</tr>
	
	<tr>
		<td style="font-style: italic; color: red;">${SPRING_SECURITY_LAST_EXCEPTION.message}</td>
		<td></td>
	</tr>
		
	<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" />
    </table>
</form>

</div>
[/file]

[comment calling this method to generate the end of the log-in page/]

[page.generateEndOfPages(model, 'login')/]

[/template]

[template public assignRoleForActions(unit : ContentUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[for (action : InlineAction | indexUnit.actions)]
[if (action.oclIsKindOf(DeleteAction))]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[if (deleteAction.requiresRole <> '')]
.antMatchers("/", "/*deleteAction[indexUnit.name.replaceAll(' ', '').replaceAll('/', '')/]*/**").access("hasRole('ROLE_[deleteAction.requiresRole.toUpperCase()/]')")
[/if]
[/let]
[elseif (action.oclIsKindOf(FeatureSupportAction))]
[let featureSupportAction : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
[if (featureSupportAction.requiresRole <> '')]
.antMatchers("/", "/*featureSupportAction[indexUnit.name.replaceAll(' ', '').replaceAll('/', '')/]*/**").access("hasRole('ROLE_[featureSupportAction.requiresRole.toUpperCase()/]')")
[/if]
[/let]
[/if]
[/for]
[/let]
[/template]

[template public assignRoleForActions(unit : ContentUnit)
	? (unit.oclIsKindOf(ImageIndexUnit)) post(trim())]
[let imageIndexUnit : ImageIndexUnit = unit.oclAsType(ImageIndexUnit)]
[for (action : InlineAction | imageIndexUnit.actions)]

[if (action.oclIsKindOf(DeleteAction))]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[if (deleteAction.requiresRole <> '')]
.antMatchers("/", "/*deleteAction[imageIndexUnit.name.replaceAll(' ', '').replaceAll('/', '')/]*/**").access("hasRole('ROLE_[deleteAction.requiresRole.toUpperCase()/]')")
[/if]
[/let]
[elseif (action.oclIsKindOf(FeatureSupportAction))]
[let featureSupportAction : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
[if (featureSupportAction.requiresRole <> '')]
.antMatchers("/", "/*featureSupportAction[imageIndexUnit.name.replaceAll(' ', '').replaceAll('/', '')/]*/**").access("hasRole('ROLE_[featureSupportAction.requiresRole.toUpperCase()/]')")
[/if]
[/let]
[/if]
[/for]
[/let]
[/template]

[template public generateRegistration(model : WafModel, page : Page)]

[file ('src/automated/website/controller/RegistrationController'.concat(model.javaExtension()), false, 'UTF-8')]
package automated.website.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import automated.website.model.User;
import automated.website.service.UserServiceImpl;

import automated.website.controller.WebController;

import javax.mail.internet.MimeMessage;

import java.util.Date;
import java.util.UUID;

@Controller
public class RegistrationController {
	
	[model.authentication.user.name/]ServiceImpl userService = new [model.authentication.user.name/]ServiceImpl();

	static String emailToRecipient, emailSubject, emailMessage;
	static final String emailFromRecipient = "oguz.ongun@yahoo.com";
	
	@Autowired
	private JavaMailSender mailSenderObj;

	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public ModelAndView showRegister(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("register");
		mav.addObject("user", new User());
		return mav;
	}

	@RequestMapping(value = "/registerProcess", method = RequestMethod.POST)
	public ModelAndView addUser(HttpServletRequest request, HttpServletResponse response,
			@ModelAttribute("user") User user) {
		user.setOperationlinkdate(new Date());
		user.setOperationkey(UUID.randomUUID().toString());
		userService.register(user);

		[if (model.authentication->notEmpty())]
		[let auth : LocalAuthenticationSystem = model.authentication.oclAsType(LocalAuthenticationSystem)]
		[if (auth.useEmailActivation and auth.sendWelcomeEmail)]
		emailSubject = "Activation & Welcome Email";
		emailMessage = "Welcome " + user.getFirstname() +  ", thanks for registering. Please click on the link for activation. \n\n"
				+ "http://localhost:8080/[model.siteName.replaceAll(' ', '')/]/activateUser?username="+user.getUsername()+"&operationkey="+user.getOperationkey();
		emailToRecipient = user.getEmail();
		mailSenderObj.send(new MimeMessagePreparator() {
			public void prepare(MimeMessage mimeMessage) throws Exception {
				MimeMessageHelper mimeMsgHelperObj = new MimeMessageHelper(mimeMessage, true, "UTF-8");				
				mimeMsgHelperObj.setTo(emailToRecipient);
				mimeMsgHelperObj.setFrom(emailFromRecipient);				
				mimeMsgHelperObj.setText(emailMessage);
				mimeMsgHelperObj.setSubject(emailSubject);
			}
		});
		[elseif (auth.sendWelcomeEmail)]
		emailSubject = "Welcome Email";
		emailMessage = "Welcome " + user.getFirstname() +  ", thanks for registering.";
		emailToRecipient = user.getEmail();
		mailSenderObj.send(new MimeMessagePreparator() {
			public void prepare(MimeMessage mimeMessage) throws Exception {
				MimeMessageHelper mimeMsgHelperObj = new MimeMessageHelper(mimeMessage, true, "UTF-8");				
				mimeMsgHelperObj.setTo(emailToRecipient);
				mimeMsgHelperObj.setFrom(emailFromRecipient);				
				mimeMsgHelperObj.setText(emailMessage);
				mimeMsgHelperObj.setSubject(emailSubject);
			}
		});
		[elseif (auth.useEmailActivation)]
		emailSubject = "Activation Email";
		emailMessage = "Please click on the link for activation. \n\n"
				+ "http://localhost:8080/[model.siteName.replaceAll(' ', '')/]/activateUser?username="+user.getUsername()+"&operationkey="+user.getOperationkey();
		emailToRecipient = user.getEmail();
		mailSenderObj.send(new MimeMessagePreparator() {
			public void prepare(MimeMessage mimeMessage) throws Exception {
				MimeMessageHelper mimeMsgHelperObj = new MimeMessageHelper(mimeMessage, true, "UTF-8");				
				mimeMsgHelperObj.setTo(emailToRecipient);
				mimeMsgHelperObj.setFrom(emailFromRecipient);				
				mimeMsgHelperObj.setText(emailMessage);
				mimeMsgHelperObj.setSubject(emailSubject);
			}
		});
		[/if]
		[/let]
		[/if]

		WebController webController = new WebController();
		return webController.[page.units->at(1).oclAsType(RegistrationUnit).confirmDestination.name.toLowerFirst().replaceAll(' ', '').replaceAll('/', '')/]();
	}
	
	@RequestMapping(value = "/activateUser", method = RequestMethod.GET)
	public ModelAndView activateUser(HttpServletRequest request, HttpServletResponse response, @RequestParam(value="username", required=false) String name, @RequestParam(value="operationkey") String operationkey) {
		[model.authentication.user.name/] user = userService.getUserWithUsername(name);
		Date linkdate = user.getOperationlinkdate();
		linkdate = new Date(linkdate.getTime() + (30 * 60000)); //activation link expires after 30 minutes
	    Date currentdate = new Date();
	    if(linkdate.compareTo(currentdate) < 0 || !user.getOperationkey().equals(operationkey)) {
	    		return new ModelAndView("error");
	    } else {
	    	userService.activateUser(name);
			WebController webController = new WebController();
			return webController.[page.units->at(1).oclAsType(RegistrationUnit).confirmDestination.name.toLowerFirst().replaceAll(' ', '').replaceAll('/', '')/]();
	    }
	}

	@RequestMapping(value = "/requestResetPassword", method = RequestMethod.GET)
		public String requestResetPassword() {
		return "requestresetpassword";
	}

	@RequestMapping(value = "/requestResetPassword", method = RequestMethod.POST)
	public ModelAndView requestResetPassword(HttpServletRequest request, HttpServletResponse response,
			@ModelAttribute("email") String email) {
		
		[model.authentication.user.name/] user =  userService.getUserWithEmail(email);
		user.setOperationkey(UUID.randomUUID().toString());

		emailSubject = "Reset Password Email";
		emailMessage = "Please click on the link for changing your password. \n\n"
				+ "http://localhost:8080/[model.siteName.replaceAll(' ', '')/]/resetPassword?username="+user.getUsername()+"&operationkey="+user.getOperationkey();
		emailToRecipient = email;
		
		mailSenderObj.send(new MimeMessagePreparator() {
			public void prepare(MimeMessage mimeMessage) throws Exception {
				MimeMessageHelper mimeMsgHelperObj = new MimeMessageHelper(mimeMessage, true, "UTF-8");				
				mimeMsgHelperObj.setTo(emailToRecipient);
				mimeMsgHelperObj.setFrom(emailFromRecipient);				
				mimeMsgHelperObj.setText(emailMessage);
				mimeMsgHelperObj.setSubject(emailSubject);
			}
		});
		
		user.setOperationlinkdate(new Date());
		userService.update(user);
		WebController webController = new WebController();
		return webController.[page.units->at(1).oclAsType(RegistrationUnit).confirmDestination.name.toLowerFirst().replaceAll(' ', '').replaceAll('/', '')/]();
	}
	
	@RequestMapping(value = "/resetPassword", method=RequestMethod.GET)
	public ModelAndView resetPassword(HttpServletRequest request, HttpServletResponse response, @RequestParam(value="username") String username, @RequestParam(value="operationkey") String operationkey) {
		ModelAndView mav = new ModelAndView("resetpassword");
		mav.addObject("username", username);
		mav.addObject("operationkey", operationkey);
		return mav;
	}
	
	@RequestMapping(value = "/resetPasswordProcess", method=RequestMethod.POST)
	public ModelAndView resetPasswordProcess(HttpServletRequest request, HttpServletResponse response, @RequestParam(value="username") String username, @RequestParam(value="operationkey") String operationkey, @RequestParam(value="password1") String password1, @RequestParam(value="password2") String password2) {
		[model.authentication.user.name/] user = userService.getUserWithUsername(username);
		Date resetpassdate = user.getOperationlinkdate();
		resetpassdate = new Date(resetpassdate.getTime() + (5 * 60000)); //reset password link expires after 5 minutes
	    Date currentdate = new Date();
	    if(resetpassdate.compareTo(currentdate) < 0 || !user.getOperationkey().equals(operationkey)) {
	    	return new ModelAndView("error");
	    } else {
	    	userService.changePassword(username, password1);
			WebController webController = new WebController();
			return webController.[page.units->at(1).oclAsType(RegistrationUnit).confirmDestination.name.toLowerFirst().replaceAll(' ', '').replaceAll('/', '')/]();
	    }
	}

}
[/file]

[comment calling this method to generate the beginning of the registration page/]

[page.generateBeginningOfPages(model, 'register')/]

[file ('WebContent/WEB-INF/jsp/register'.concat(model.jspExtension()), true, 'UTF-8')]

	<div class="authenticationcard" align="center">
		<h6>Please enter your details below</h6>
	</div>

	<div class="authenticationcard">
	<form:form id="regForm" modelAttribute="[model.authentication.user.name.toLowerFirst()/]" action="registerProcess"
		method="post" onsubmit="return checkPasswords(this);">
		<table class="striped" align="center">
			[for (f : Feature | model.authentication.user.features)]
			[if f.name <> 'active' and f.name <> 'role' and f.name <> 'operationlinkdate' and f.name <> 'operationkey']
			[if (f.name = model.authentication.oclAsType(LocalAuthenticationSystem).userKey.name)]
			<tr>
				<td class="lefttd"><form:label path="[f.name/]"><h6 class ="textcol">[f.displayLabel/]:</h6></form:label></td>
				<td class="righttd"><form:input type="password" path="[f.name/]" name="[f.name/]" id="[f.name/]" /></td>
			</tr>
			<tr>
				<td class="lefttd"><form:label path="active"><h6 class ="textcol">Confrim Password:</h6></form:label></td>
				<td class="righttd"><form:input type="password" path="active" name="active" id="active" /></td>
			</tr>
			[else]
			<tr>
				<td class="lefttd"><form:label path="[f.name/]"><h6 class ="textcol">[f.displayLabel/]:</h6></form:label></td>
				<td class="righttd"><form:input path="[f.name/]" name="[f.name/]" id="[f.name/]" /></td>
			</tr>
			[/if]
			[/if]
			[/for]
			<tr>
				<td class="lefttd"><a class="btn btn-primary block full-width m-b grey darken-2"  href="/[model.siteName.replaceAll(' ', '')/]/[page.units->at(1).oclAsType(RegistrationUnit).cancelDestination.generatePageURL('').trim()/]">[page.units->at(1).oclAsType(RegistrationUnit).cancelLabel/]
					<i class="material-icons right">cancel</i>
				</a></td>
				<td class="righttd"><form:button class="btn btn-primary block full-width m-b grey darken-2" id="register" name="register">[page.units->at(1).oclAsType(RegistrationUnit).confirmLabel/]
					<i class="material-icons right">send</i>
				</form:button>
				</td>
			</tr>
			<tr></tr>
		</table>
	</form:form>
</div>

<script type="text/javascript">
function checkPasswords(form) {
    if (form.password.value != form.active.value)
    {
        alert('The passwords do not match!');
        return false;
    } else {
        return true;
    }
}
</script>
[/file]

[comment calling this method to generate the end of the registration page/]

[page.generateEndOfPages(model, 'register')/]

[/template]

[template public generateForgottenPasswordPages(model : WafModel, page : Page)]

[page.generateBeginningOfPages(model, 'requestresetpassword')/]

[file ('WebContent/WEB-INF/jsp/requestresetpassword'.concat(model.jspExtension()), true, 'UTF-8')]
<div class="authenticationcard" align="center">
	<h6>Please enter your email address</h6>
</div>

<div class="authenticationcard">
<form:form action="requestResetPassword" method="POST">
	<table class="striped" align="center">
    <tr>
    	<td class="lefttd"><h5 class ="textcol">Email: </h5></td>
     	<td class="righttd"> <input type="text" class="form-control" id="email" name="email" required="" /> </td>
    </tr>
    <tr>
		<td class="lefttd"><a class="btn btn-primary block full-width m-b grey darken-2" href="/[model.siteName.replaceAll(' ', '')/]/[page.units->at(1).oclAsType(ForgottenPasswordUnit).cancelDestination.generatePageURL('').trim()/]">[page.units->at(1).oclAsType(ForgottenPasswordUnit).cancelLabel/]
			<i class="material-icons right">cancel</i>
		</a>
		</td>
    	<td class="righttd"> <button class="btn btn-primary block full-width m-b grey darken-2" type="submit" class="btn btn-primary block full-width m-b">[page.units->at(1).oclAsType(ForgottenPasswordUnit).submitLabel/]
			<i class="material-icons right">send</i>
		</button> 
		</td>
    </tr>
    </table>
</form:form>
</div>
[/file]

[page.generateEndOfPages(model, 'requestresetpassword')/]


[page.generateBeginningOfPages(model, 'resetpassword')/]

[file ('WebContent/WEB-INF/jsp/resetpassword'.concat(model.jspExtension()), true, 'UTF-8')]
<div class="authenticationcard" align="center">
	<h6>Please enter a new password</h6>
</div>

<div class="authenticationcard">
<form:form action="resetPasswordProcess" method="POST" onsubmit="return checkPasswords(this);">
	<table class="striped" align="center">
    <tr>
    	<td class="lefttd"><h5 class ="textcol">New Password: </h5></td>
    	<td class="righttd"> <input type="password" class="form-control" id="password1" name="password1" required="" /> </td>
    </tr>
    <tr>
        <td class="lefttd"><h5 class ="textcol">Confirm New Password: </h5></td>
        <td class="righttd"> <input type="password" class="form-control" id="password2" name="password2" required="" /> </td>
    </tr>
	<tr>
		<td class="lefttd"><a class="btn btn-primary block full-width m-b grey darken-2" href="/[model.siteName.replaceAll(' ', '')/]/[page.units->at(1).oclAsType(ForgottenPasswordUnit).cancelDestination.generatePageURL('').trim()/]">[page.units->at(1).oclAsType(ForgottenPasswordUnit).cancelLabel/]
			<i class="material-icons right">cancel</i>
		</a>
		</td>
		<td class="righttd"> <button class="btn btn-primary block full-width m-b grey darken-2" type="submit" class="btn btn-primary block full-width m-b">Change password
			<i class="material-icons right">send</i>
		</button>
		</td>
    </tr>
    <tr>
    	<td><input type="hidden" id="username" name="username" value="${username}" /></td>
		<td><input type="hidden" id="operationkey" name="operationkey" value="${operationkey}" /></td>
    </tr>
    </table>
</form:form>
</div>

<script type="text/javascript">
function checkPasswords(form) {
    if (form.password1.value != form.password2.value)
    {
        alert('The passwords do not match!');
        return false;
    } else {
        return true;
    }
}
</script>
[/file]

[page.generateEndOfPages(model, 'resetpassword')/]

[/template]

